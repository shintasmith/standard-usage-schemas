<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE application[
<!ENTITY % common SYSTEM "../src/docbkx/common/common.ent">
    %common;
]>
<application xmlns="http://wadl.dev.java.net/2009/02"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:db="http://docbook.org/ns/docbook"
             xmlns:rax="http://docs.rackspace.com/api"
             xmlns:atom="http://www.w3.org/2005/Atom"
             xmlns:wadl="http://wadl.dev.java.net/2009/02"
             xmlns:cldfeeds="http://docs.rackspace.com/api/cloudfeeds"
             xmlns:error="http://docs.rackspace.com/core/error"
             xmlns:event="http://docs.rackspace.com/core/event">

    <!-- Resource Types -->
    <resource_type id="TenantAtomFeed">
        <resource path="{tid}/" id="tenanted_feed"  rax:roles="cloudfeeds:observer identity:user-admin admin observer">
            <param name="tid" type="xs:string" style="template"><doc>Specifies the tenant Id.</doc></param>
            <method href="#getFeed" />
        </resource>
    </resource_type>

    <resource_type id="AtomFeed">
        <method href="#getFeed" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer"/>
    </resource_type>

    <!-- This resource_type is for the old JSON format, implemented by Apache Abdera's
         JSON Serialization: 
             https://cwiki.apache.org/confluence/display/ABDERA/JSON+Serialization
         This format was experimental and was only kept here for backwards compatibility
         reason. It should *NOT* be used for new feeds.
    -->
    <resource_type id="AtomFeedAllowJson">
        <method href="#getFeedAllowJson" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer"/>
    </resource_type>

    <resource_type id="Unvalidated">
        <wadl:doc title="Unvalidated" xmlns="http://docbook.org/ns/docbook">
            <para>
                Leaving these descriptions fairly loose as these
                feeds are currently not validated against.
            </para>
        </wadl:doc>
        <method href="#addPlainUnvalidatedEntry" rax:roles="cloudfeeds:service-admin"/>
        <resource path="entries/{id}" rax:roles="cloudfeeds:service-admin  cloudfeeds:service-observer">
            <param name="id" type="xs:anyURI" style="template"> <doc>Specifies the entry's UUID, for example: urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f</doc></param>
            <method href="#getEntry"/>
        </resource>
    </resource_type>

    <!-- This resource_type is for the mixed XML/JSON content (the envelope is in XML but
         the atom:content element has type="application/json". It is here only to support
         older feeds that attempted to use JSON before JSON was officially supported in
         Cloud Feeds. It should *NOT* be used for newly created feeds. 
         JSON format is automatically supported on all feeds via the setting of 
         Content-Type header (on publish) and Accept header (on consumption) to 
         application/vnd.rackspace.atom+json
    -->
    <resource_type id="JsonContentOnly">
        <wadl:doc title="JsonContentOnly" xmlns="http://docbooks.org/ns/docbook">
            <para>
                The atom:content node must have type="application/json".  While the atom envelope can be XML, the content
                of the message must be JSON.
            </para>
        </wadl:doc>
        <method href="#addJsonContentOnly" rax:roles="cloudfeeds:service-admin"/>
        <resource path="entries/{id}" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer">
            <param name="id" type="xs:anyURI" style="template"> <doc>Specifies the entry's UUID, for example: urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f</doc></param>
            <method href="#getEntry"/>
        </resource>
    </resource_type>

    <resource_type id="Validated">
        <wadl:doc title="Validated" xmlns="http//docbook.org/ns/docbook">
            <para>
                Check against XSDs but don't check against cross
                posts.
            </para>
        </wadl:doc>
        <method href="#addPlainEntry" rax:roles="cloudfeeds:service-admin"/>
        <resource path="entries/{id}" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer">
            <param name="id" type="xs:anyURI" style="template"> <doc>Specifies the entry's UUID, for example: urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f</doc></param>
            <method href="#getEntry"/>
        </resource>
    </resource_type>
    
    <resource_type id="UsageDeadLetter">
        <wadl:doc title="UsageDeadLetter" xmlns="http//docbook.org/ns/docbook">
            <para>
                Allow Usage DeadLetter events.
            </para>
        </wadl:doc>
        <method href="#addUsageDeadLetter" rax:roles="cloudfeeds:service-admin"/>
        <resource path="entries/{id}" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer">
            <param name="id" type="xs:anyURI" style="template"> <doc>Specifies the entry's UUID, for example: urn:uuid:676f3860-447c-40a3-8f61-9791819cc82f</doc></param>
            <method href="#getEntry"/>
        </resource>
    </resource_type>

    <resource_type id="TenantFeedsCatalog">
        <resource path="{tid}" rax:roles="cloudfeeds:observer identity:user-admin admin observer">
            <param name="tid" type="xs:string" style="template"><doc>Specifies the tenant id.</doc></param>
            <method name="GET"/>
        </resource>
    </resource_type>

    <resource_type id="FeedsCatalog">
        <method name="GET" rax:roles="cloudfeeds:service-admin cloudfeeds:service-observer"/>
    </resource_type>

    <!-- METHODS -->
    <method id="getFeed" name="GET">
        <wadl:doc xml:lang="EN" title="Get Feed" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation obtains the most recent events for this product's feed.</para>            
        </wadl:doc>
        <request>
            <param name="ACCEPT" style="header" type="cldfeeds:AcceptHeaderType" repeating="true" required="true"
                rax:message="getFeed: Accept header contains unsupported media types: application/*json"
                rax:code="406">
                <wadl:doc xmlns="http//docbook.org/ns/docbook">
                   Specifies the type of Accept header to be used in the request.
                </wadl:doc>
                </param>

            <param name="marker" style="query" type="xs:anyURI" required="false"> 
            <wadl:doc xmlns="http//docbook.org/ns/docbook">
                Specifies the entry from which the feed is read. If no value is specified, forward is used by default.
            </wadl:doc></param>
            
            <param name="limit"  style="query" type="xs:int" required="false">  <wadl:doc xmlns="http//docbook.org/ns/docbook">
                Specifies the number of entries to return. By default
                the limit is set to 25. The minimum limit is 1 and the maximum limit is 1,000.
            </wadl:doc></param>
            <param name="direction" style="query" type="xs:string" required="false">
                <wadl:doc xmlns="http//docbook.org/ns/docbook">
                        Valid values for this parameter are either backward or forward.
                </wadl:doc>
            </param>
        </request>
          <response status="200">
            <wadl:doc xmlns="http://docbook.org/ns/docbook" title="OK" xml:lang="EN">The request succeeded.</wadl:doc>
            <representation mediaType="application/json"/>
         </response>
        <!-- On Error -->
         &commonFaults;
         &getFaults;
    </method>

    <method id="getFeedAllowJson" name="GET">
        <wadl:doc xml:lang="EN" title="Get Feed" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation obtains the most recent events for this product's feed.</para>            
        </wadl:doc>
        <request>
            <param name="marker" style="query" type="xs:anyURI" required="false"><wadl:doc xmlns="http//docbook.org/ns/docbook">
                Specifies the entry from which the feed is read. If no value is specified, forward is used by default
            </wadl:doc></param>            
            <param name="limit"  style="query" type="xs:int" required="false"><wadl:doc xmlns="http//docbook.org/ns/docbook">
                Specifies the number of entries to return. By default
                the limit is set to 25. The minimum limit is 1 and the maximum limit is 1,000.
            </wadl:doc></param>
            <param name="direction" style="query" type="xs:string" required="false">
                <wadl:doc xmlns="http//docbook.org/ns/docbook">
                        Valid values for this parameter are either backward or forward.
                </wadl:doc>
            </param>
        </request>
        <response status="200">
            <wadl:doc xmlns="http://docbook.org/ns/docbook" title="OK" xml:lang="EN">The request succeeded.</wadl:doc>
            <representation mediaType="application/json"/>
         </response>
        <!-- On Error -->
        &commonFaults;
        &getFaults;
    </method>

    <method id="getEntry" name="GET">
        <wadl:doc xml:lang="EN" title="Get Event ID" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation obtains one particular event whose Id is listed in the URI.</para>
        </wadl:doc>
        <request>
            <param name="ACCEPT" style="header" type="cldfeeds:AcceptHeaderType" repeating="true" required="true"
                rax:message="getEntry: Accept header contains unsupported media types: application/*json"
                rax:code="406"><wadl:doc xmlns="http//docbook.org/ns/docbook">
                    Specifies the type of Accept header to be used in the request.
                </wadl:doc></param>            
        </request>
               
        <response status="200">
            <wadl:doc xmlns="http://docbook.org/ns/docbook" title="OK" xml:lang="EN">The request succeeded.</wadl:doc>
            <representation mediaType="application/json"/>
         </response>
        <!-- On Error -->
        &commonFaults;
        &getFaults;
    </method>

    <method id="addPlainUnvalidatedEntry" name="POST">
        <wadl:doc xml:lang="EN" title="Adding an event." xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation adds an event for this particular product.</para>

        </wadl:doc>
        <request rax:ignoreXSD="true">
            <representation mediaType="application/xml"/>
            <representation mediaType="application/json"/>               
            <representation mediaType="application/atom+xml"/>
            <representation mediaType="application/vnd.rackspace.atom+json"/>
        </request>
        <!-- Okay -->
        <response status="201" >
            <wadl:doc title="Created">The request has been fulfilled. The entry has been created.</wadl:doc>
        </response>
        <!-- On Error -->
        &commonFaults;
        &postPutFaults;
    </method>

    <!-- This resource_type is for the mixed XML/JSON content (the envelope is in XML but
         the atom:content element has type="application/json". It is here only to support
         older feeds that attempted to use JSON before JSON was officially supported in
         Cloud Feeds. It should *NOT* be used for newly created feeds. 
         JSON format is automatically supported on all feeds via the setting of 
         Content-Type header (on publish) and Accept header (on consumption) to 
         application/vnd.rackspace.atom+json
    -->
    <method id="addJsonContentOnly" name="POST">
        <wadl:doc xml:lang="EN" title="Add JSON Only Entry" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">The atom:content node must have type="application/json".  While the atom envelope can
                be XML, the content of the message must be JSON..</para>
        </wadl:doc>
        <request rax:ignoreXSD="true">
            <representation mediaType="application/atom+xml" element="atom:entry">
                <!--
                   We add an assertion to state that only atom:content of type 'application/json' is allowed.
                 -->
                <param name="error"
                       style="plain"
                       required="true"
                       path="/atom:entry/atom:content/@type = 'application/json'"
                       rax:message="Only atom:content nodes of type='application/json' allowed."/>
            </representation>
        </request>
        <!-- Okay -->
        <response status="201" >
            <wadl:doc title="Created">The request has been fulfilled. The domain has been created.</wadl:doc>
        </response>
        <!-- On Error -->
        &commonFaults;
        &postPutFaults;
    </method>

    <method id="addPlainEntry" name="POST">
        <wadl:doc xml:lang="EN" title="Add Plain Entry" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation adds an event for this particular product.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/atom+xml" element="atom:entry">

                <!--
                  TODO:  Once we can move to a single validator we need to renable this for D-18332

                  Ensure that the publisher does not send any 'tid:' 'rgn:' 'dc:' 'rid:' and 'type:' categories.
                  These are populated by Cloud Feeds.
                <param name="no_tid"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^tid:.*' )])"
                       rax:message="the 'tid:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_rgn"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^rgn:.*' )])"
                       rax:message="the 'rgn:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_dc"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^dc:.*' )])"
                       rax:message="the 'dc:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_rid"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^rid:.*' )])"
                       rax:message="the 'rid:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_type"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^type:.*' )])"
                       rax:message="the 'type:' category is generated by Cloud Feeds and should not be posted.">
                </param>
                -->

                <!--
                   We add an assertion to state that eventErrors are not allowed. If the XPath in the path
                   attribute evaluates to false we'll error out with the error message in rax:message.
                 -->
                <param name="error"
                      style="plain"
                      required="true"
                      path="not(/atom:entry/atom:content/error:eventError)"
                      rax:message="eventErrors are not allowed in this feed."/>
               <!-- We keep common preprocessing operations, adding common categories etc. -->
               <rax:preprocess href="atom_hopper_pre.xsl"/>
            </representation>
        </request>
        <!-- Okay -->
        <response status="201" >
            <wadl:doc title="Created">The request has been fulfilled. The domain has been created.</wadl:doc>
        </response>
        <!-- On Error -->
         &commonFaults;
         &postPutFaults;
    </method>
    
    <method id="addUsageDeadLetter" name="POST">
        <wadl:doc xml:lang="EN" title="Add Usage Dead Letter" xmlns="http://docbook.org/ns/docbook">
            <para role="shortdesc">This operation adds a usage dead letter event.</para>
            <para>When a messaging system determines that it cannot or should not deliver a message, it may elect to 
                  move the message to a Usage Dead Letter Channel. This operation allows errors to be posted to a dead letter
                  atom feed.</para>
        </wadl:doc>
        <request>
            <representation mediaType="application/atom+xml" element="atom:entry">

                <!--
                  TODO:  Once we can move to a single validator we need to renable this for D-18332

                  Ensure that the publisher does not send any 'tid:' 'rgn:' 'dc:' 'rid:' and 'type:' categories.
                  These are populated by Cloud Feeds.
                <param name="no_tid"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^tid:.*' )])"
                       rax:message="the 'tid:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_rgn"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^rgn:.*' )])"
                       rax:message="the 'rgn:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_dc"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^dc:.*' )])"
                       rax:message="the 'dc:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_rid"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^rid:.*' )])"
                       rax:message="the 'rid:' category is generated by Cloud Feeds and should not be posted.">
                </param>

                <param name="no_type"
                       style="plain"
                       required="true"
                       path="not(/atom:entry/atom:category/@term[matches( ., '^type:.*' )])"
                       rax:message="the 'type:' category is generated by Cloud Feeds and should not be posted.">
                </param>
                -->
               <!--
                   We add an assertion to state that only usage dead letters are allowed. If the XPath in the path
                   attribute evaluates to false we'll error out with the error message in rax:message.
                 -->
                <param name="error"
                      style="plain"
                      required="true"
                      path="/atom:entry/atom:content/error:eventError"
                      rax:message="Only eventErrors are allowed in this feed."/>
               <!-- We keep common preprocessing operations, adding common categories etc. -->
               <rax:preprocess href="atom_hopper_pre.xsl"/>
            </representation>
        </request>
        <!-- Okay -->
        <response status="201" >
            <wadl:doc title="Created">The request has been fulfilled. The domain has been created.</wadl:doc>
        </response>
        <!-- On Error -->
         &commonFaults;
         &postPutFaults;
    </method>
</application>
